# Generated by Django 3.2.8 on 2021-12-02 01:48

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import radroutes.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_guide', models.BooleanField()),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('area_id', models.AutoField(primary_key=True, serialize=False)),
                ('area_name', models.TextField(max_length=100)),
                ('area_quality', models.FloatField(blank=True, null=True)),
                ('area_description', models.TextField(blank=True, max_length=5000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('book_id', models.AutoField(primary_key=True, serialize=False)),
                ('book_name', models.TextField(max_length=200)),
                ('book_description', models.TextField(blank=True, max_length=5000, null=True)),
                ('public', models.BooleanField()),
                ('listed', models.BooleanField()),
                ('quality_max', models.IntegerField(blank=True, null=True, validators=[radroutes.models.validate_star_rating])),
                ('grade_hist', models.TextField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('feature_id', models.AutoField(primary_key=True, serialize=False)),
                ('feature_name', models.TextField(max_length=100)),
                ('feature_description', models.TextField(max_length=5000)),
                ('gps', models.TextField(blank=True, max_length=50, null=True)),
                ('location', models.TextField(blank=True, max_length=5000, null=True)),
                ('area_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='radroutes.area')),
            ],
        ),
        migrations.CreateModel(
            name='Face',
            fields=[
                ('face_id', models.AutoField(primary_key=True, serialize=False)),
                ('face_name', models.TextField(max_length=200)),
                ('face_description', models.TextField(blank=True, max_length=5000, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='')),
                ('feature_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='radroutes.feature')),
            ],
        ),
        migrations.CreateModel(
            name='Climb',
            fields=[
                ('climb_id', models.AutoField(primary_key=True, serialize=False)),
                ('climb_name', models.TextField(max_length=200)),
                ('climb_type', models.TextField(blank=True, max_length=50, null=True)),
                ('grade', models.TextField(blank=True, max_length=20, null=True)),
                ('quality', models.IntegerField(blank=True, null=True, validators=[radroutes.models.validate_star_rating])),
                ('height', models.FloatField(blank=True, null=True, validators=[radroutes.models.validate_positive])),
                ('description', models.TextField(blank=True, max_length=5000, null=True)),
                ('author_email', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('face_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='radroutes.face')),
            ],
        ),
        migrations.AddField(
            model_name='area',
            name='book_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='radroutes.book'),
        ),
        migrations.CreateModel(
            name='UserPrivateAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='radroutes.book')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user_id', 'book_id')},
            },
        ),
        migrations.CreateModel(
            name='UserLibrary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='radroutes.book')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user_id', 'book_id')},
            },
        ),
        migrations.CreateModel(
            name='BookReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_body', models.TextField(blank=True, max_length=5000, null=True)),
                ('rating', models.IntegerField(validators=[radroutes.models.validate_star_rating])),
                ('book_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='radroutes.book')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('reviewer', 'book_id')},
            },
        ),
    ]
